<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\STM32F411C.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\STM32F411C.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Nov 28 14:07:19 2018
<BR><P>
<H3>Maximum Stack Usage =       1304 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; uSVIdle &rArr; uPTRegisterCycle &rArr; _uPTDeviceSignin &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[83]">SPI_RW</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83]">SPI_RW</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from kdwm1000_it.o(i.BusFault_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[30]">DMA1_Stream7_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[34]">DMA2_Stream0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[35]">DMA2_Stream1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[36]">DMA2_Stream2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[37]">DMA2_Stream3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[38]">DMA2_Stream4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from kdwm1000_it.o(i.DebugMon_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[4d]">DeviceDelayMs</a> from main.o(i.DeviceDelayMs) referenced from main.o(i.main)
 <LI><a href="#[51]">DeviceGetRxTimestamp</a> from main.o(i.DeviceGetRxTimestamp) referenced from main.o(i.main)
 <LI><a href="#[53]">DeviceGetTxTimestamp</a> from main.o(i.DeviceGetTxTimestamp) referenced from main.o(i.main)
 <LI><a href="#[4c]">DeviceInit</a> from main.o(i.DeviceInit) referenced from main.o(i.main)
 <LI><a href="#[4f]">DeviceRecv</a> from main.o(i.DeviceRecv) referenced from main.o(i.main)
 <LI><a href="#[52]">DeviceRecvNoPre</a> from main.o(i.DeviceRecvNoPre) referenced from main.o(i.main)
 <LI><a href="#[4e]">DeviceSend</a> from main.o(i.DeviceSend) referenced from main.o(i.main)
 <LI><a href="#[54]">DeviceSendDelayed</a> from main.o(i.DeviceSendDelayed) referenced from main.o(i.main)
 <LI><a href="#[50]">DeviceSendExpResp</a> from main.o(i.DeviceSendExpResp) referenced from main.o(i.main)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2d]">EXTI15_10_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[40]">FPU_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from kdwm1000_it.o(i.HardFault_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[26]">I2C1_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[25]">I2C1_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[28]">I2C2_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[27]">I2C2_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3f]">I2C3_ER_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3e]">I2C3_EV_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from kdwm1000_it.o(i.MemManage_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from kdwm1000_it.o(i.NMI_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[39]">OTG_FS_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from kdwm1000_it.o(i.PendSV_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2e]">RTC_Alarm_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[31]">SDIO_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[41]">SPI4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[42]">SPI5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from kdwm1000_it.o(i.SVC_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from kdwm1000_it.o(i.SysTick_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f411xe.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[20]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[1f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[32]">TIM5_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from kdwm1000_it.o(i.USART1_IRQHandler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[3d]">USART6_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from kdwm1000_it.o(i.UsageFault_Handler) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f411xe.o(.text) referenced from startup_stm32f411xe.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f411xe.o(.text)
 <LI><a href="#[47]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[48]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[46]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4b]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[4a]">fputc</a> from serial.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[49]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[43]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[55]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[10b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[10c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[10d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[10e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f411xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
</UL>

<P><STRONG><a name="[101]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellLogInsert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSetConfigureRespons
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTGetConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitInAddrEx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uLLFramePacket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellLogInsert
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLUserInterfaceRegister
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCreate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellLogInsert
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterCycle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVManagerInit
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[da]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdLs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
</UL>

<P><STRONG><a name="[bf]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellLogInsert
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
</UL>

<P><STRONG><a name="[c1]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[de]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdScan
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
</UL>

<P><STRONG><a name="[5a]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_new
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_new
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLUserInterfaceRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLInit
</UL>

<P><STRONG><a name="[5c]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdSet
</UL>

<P><STRONG><a name="[5e]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[60]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdScan
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[113]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[5d]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[46]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[114]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[64]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[115]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[116]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[49]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[6c]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kdwm1000_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DW1000_Config</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, dw1000.o(i.DW1000_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DW1000_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KDWM_DW1000_Config
</UL>

<P><STRONG><a name="[75]"></a>DW1000_GetDeviceID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dw1000.o(i.DW1000_GetDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DW1000_GetDeviceID &rArr; DW1000_readData32 &rArr; DW1000_readData
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData32
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[77]"></a>DW1000_ReadOPT</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dw1000.o(i.DW1000_ReadOPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DW1000_ReadOPT &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[7a]"></a>DW1000_Reset</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, dw1000.o(i.DW1000_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DW1000_Reset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
</UL>

<P><STRONG><a name="[7c]"></a>DW1000_SetAntennaDelayRX</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dw1000.o(i.DW1000_SetAntennaDelayRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DW1000_SetAntennaDelayRX &rArr; DW1000_writeData16 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData16
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
</UL>

<P><STRONG><a name="[7e]"></a>DW1000_SetAntennaDelayTX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dw1000.o(i.DW1000_SetAntennaDelayTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DW1000_SetAntennaDelayTX &rArr; DW1000_writeData16 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData16
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
</UL>

<P><STRONG><a name="[7f]"></a>DW1000_SetClock</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, dw1000.o(i.DW1000_SetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DW1000_SetClock &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[80]"></a>DW1000_SetCrystalTrim</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dw1000.o(i.DW1000_SetCrystalTrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DW1000_SetCrystalTrim &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[81]"></a>DW1000_SetSpeed</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, dw1000.o(i.DW1000_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DW1000_SetSpeed &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[79]"></a>DW1000_readData</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, dw1000.o(i.DW1000_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DW1000_readData
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData32
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetCrystalTrim
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetClock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_ReadOPT
</UL>

<P><STRONG><a name="[84]"></a>DW1000_readData16</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dw1000.o(i.DW1000_readData16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DW1000_readData16 &rArr; DW1000_readData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
</UL>

<P><STRONG><a name="[76]"></a>DW1000_readData32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dw1000.o(i.DW1000_readData32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DW1000_readData32 &rArr; DW1000_readData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSend
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecvNoPre
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleepaftertx
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_GetDeviceID
</UL>

<P><STRONG><a name="[78]"></a>DW1000_writeData</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, dw1000.o(i.DW1000_writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxreset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetCrystalTrim
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetClock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_ReadOPT
</UL>

<P><STRONG><a name="[7d]"></a>DW1000_writeData16</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, dw1000.o(i.DW1000_writeData16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DW1000_writeData16 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetAntennaDelayTX
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetAntennaDelayRX
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
</UL>

<P><STRONG><a name="[85]"></a>DW1000_writeData32</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, dw1000.o(i.DW1000_writeData32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendExpResp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendDelayed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSend
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecvNoPre
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleepaftertx
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kdwm1000_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DeviceDelayMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.DeviceDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceDelayMs &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[51]"></a>DeviceGetRxTimestamp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, main.o(i.DeviceGetRxTimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DeviceGetRxTimestamp &rArr; dwt_readrxtimestamp &rArr; DW1000_readData
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendDelayed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[53]"></a>DeviceGetTxTimestamp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, main.o(i.DeviceGetTxTimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DeviceGetTxTimestamp &rArr; dwt_readtxtimestamp &rArr; DW1000_readData
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4c]"></a>DeviceInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.DeviceInit))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4f]"></a>DeviceRecv</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(i.DeviceRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DeviceRecv &rArr; dwt_rxenable &rArr; dwt_forcetrxoff &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxreset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[52]"></a>DeviceRecvNoPre</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.DeviceRecvNoPre))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DeviceRecvNoPre &rArr; dwt_setrxtimeout &rArr; DW1000_writeData16 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxreset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4e]"></a>DeviceSend</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(i.DeviceSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DeviceSend &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[54]"></a>DeviceSendDelayed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(i.DeviceSendDelayed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DeviceSendDelayed &rArr; dwt_starttx &rArr; dwt_entersleepaftertx &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceGetRxTimestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[50]"></a>DeviceSendExpResp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.DeviceSendExpResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DeviceSendExpResp &rArr; dwt_starttx &rArr; dwt_entersleepaftertx &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[72]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KDWM_GPIO_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_Reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_Config
</UL>

<P><STRONG><a name="[71]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_Config
</UL>

<P><STRONG><a name="[fb]"></a>GetDevSn</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uptranging.o(i.GetDevSn))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
</UL>

<P><STRONG><a name="[7b]"></a>HAL_Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4_delay.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KDWM_DW1000_Config
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_Reset
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceDelayMs
</UL>

<P><STRONG><a name="[b8]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4_delay.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[91]"></a>HAL_InitTick</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4_delay.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kdwm1000_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>KDWM_DW1000_Config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kdwm1000_bsp.o(i.KDWM_DW1000_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = KDWM_DW1000_Config &rArr; DW1000_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
</UL>

<P><STRONG><a name="[95]"></a>KDWM_GPIO_Config</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, kdwm1000_bsp.o(i.KDWM_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = KDWM_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
</UL>

<P><STRONG><a name="[97]"></a>KDWM_UART_Config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kdwm1000_bsp.o(i.KDWM_UART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = KDWM_UART_Config &rArr; Serial_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kdwm1000_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kdwm1000_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
</UL>

<P><STRONG><a name="[92]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kdwm1000_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>QueueClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stdplus_queue.o(i.QueueClear))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>QueueCreate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stdplus_queue.o(i.QueueCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QueueCreate &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellInit
</UL>

<P><STRONG><a name="[bd]"></a>QueueGetItemCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdplus_queue.o(i.QueueGetItemCount))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>QueueIsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stdplus_queue.o(i.QueueIsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePopBack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePop
</UL>

<P><STRONG><a name="[9f]"></a>QueueIsFull</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stdplus_queue.o(i.QueueIsFull))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePush
</UL>

<P><STRONG><a name="[9b]"></a>QueuePop</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, stdplus_queue.o(i.QueuePop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QueuePop
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
</UL>

<P><STRONG><a name="[9d]"></a>QueuePopBack</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, stdplus_queue.o(i.QueuePopBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QueuePopBack
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>QueuePush</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stdplus_queue.o(i.QueuePush))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QueuePush
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsFull
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KDWM_GPIO_Config
</UL>

<P><STRONG><a name="[70]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_Config
</UL>

<P><STRONG><a name="[af]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[b1]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
</UL>

<P><STRONG><a name="[b0]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[c0]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a0]"></a>RangingInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ranging.o(i.RangingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RangingInit &rArr; dwt_configure &rArr; _dwt_configlde &rArr; DW1000_writeData16 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxaftertxdelay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KDWM_UART_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KDWM_GPIO_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KDWM_DW1000_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetAntennaDelayTX
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetAntennaDelayRX
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_Reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[a7]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[8f]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellLogInsert
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameRecv
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTReSignin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTWaitDeviceRegister
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTDeviceSignin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTAllocRespons
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLUserInterfaceRegister
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSend
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLGetTxTimeStamp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLGetRxTimeStamp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendExpResp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendDelayed
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLDelayMs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSend
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 382 bytes, Stack size 120 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[74]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetSpeed
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_Config
</UL>

<P><STRONG><a name="[82]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetSpeed
</UL>

<P><STRONG><a name="[73]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetSpeed
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_Config
</UL>

<P><STRONG><a name="[83]"></a>SPI_RW</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4_spi.o(i.SPI_RW))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kdwm1000_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>Serial_Config</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, serial.o(i.Serial_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Serial_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KDWM_UART_Config
</UL>

<P><STRONG><a name="[b6]"></a>Serial_SendData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial.o(i.Serial_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Serial_SendData &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kdwm1000_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>UART_SendByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4_usart.o(i.UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>UART_SendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4_usart.o(i.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SendData
</UL>

<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, kdwm1000_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USART1_IRQHandler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePush
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePopBack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueGetItemCount
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueClear
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
</UL>

<P><STRONG><a name="[bb]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
</UL>

<P><STRONG><a name="[b2]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_Config
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kdwm1000_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f411xe.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[117]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[bc]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdSet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdScan
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdPing
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdLs
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSetConfigure
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTPing
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTGetConfigure
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVManagerInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[118]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[e5]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[119]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[11a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[11b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[11c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c6]"></a>_dwt_configlde</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, deca_device.o(i._dwt_configlde))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _dwt_configlde &rArr; DW1000_writeData16 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData16
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
</UL>

<P><STRONG><a name="[d2]"></a>_uPTRangingSendPoll</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uptranging.o(i._uPTRangingSendPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _uPTRangingSendPoll &rArr; uLLFrameSendExpResp &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendExpResp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
</UL>

<P><STRONG><a name="[d4]"></a>_uPTRangingSendResp</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uptranging.o(i._uPTRangingSendResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _uPTRangingSendResp &rArr; uLLFrameSendDelayed &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendDelayed
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
</UL>

<P><STRONG><a name="[d6]"></a>_uPTRangingWaitRespons</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uptranging.o(i._uPTRangingWaitRespons))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _uPTRangingWaitRespons &rArr; uLLFrameWaitData &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitData
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
</UL>

<P><STRONG><a name="[a2]"></a>dwt_configure</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, deca_device.o(i.dwt_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_configure &rArr; _dwt_configlde &rArr; DW1000_writeData16 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData16
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
</UL>

<P><STRONG><a name="[e2]"></a>dwt_entersleepaftertx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, deca_device.o(i.dwt_entersleepaftertx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dwt_entersleepaftertx &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData32
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
</UL>

<P><STRONG><a name="[e3]"></a>dwt_forcetrxoff</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, deca_device.o(i.dwt_forcetrxoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_forcetrxoff &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData32
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
</UL>

<P><STRONG><a name="[a1]"></a>dwt_initialise</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, deca_device.o(i.dwt_initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dwt_initialise &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData32
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData16
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetSpeed
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetCrystalTrim
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_SetClock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_ReadOPT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_GetDeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
</UL>

<P><STRONG><a name="[8b]"></a>dwt_readrxdata</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(i.dwt_readrxdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dwt_readrxdata &rArr; DW1000_readData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecvNoPre
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecv
</UL>

<P><STRONG><a name="[86]"></a>dwt_readrxtimestamp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deca_device.o(i.dwt_readrxtimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dwt_readrxtimestamp &rArr; DW1000_readData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceGetRxTimestamp
</UL>

<P><STRONG><a name="[87]"></a>dwt_readtxtimestamp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, deca_device.o(i.dwt_readtxtimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dwt_readtxtimestamp &rArr; DW1000_readData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceGetTxTimestamp
</UL>

<P><STRONG><a name="[89]"></a>dwt_rxenable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, deca_device.o(i.dwt_rxenable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_rxenable &rArr; dwt_forcetrxoff &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData16
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecv
</UL>

<P><STRONG><a name="[8a]"></a>dwt_rxreset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, deca_device.o(i.dwt_rxreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dwt_rxreset &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecvNoPre
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecv
</UL>

<P><STRONG><a name="[90]"></a>dwt_setdelayedtrxtime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, deca_device.o(i.dwt_setdelayedtrxtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dwt_setdelayedtrxtime &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendDelayed
</UL>

<P><STRONG><a name="[a3]"></a>dwt_setrxaftertxdelay</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, deca_device.o(i.dwt_setrxaftertxdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dwt_setrxaftertxdelay &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData32
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
</UL>

<P><STRONG><a name="[88]"></a>dwt_setrxtimeout</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, deca_device.o(i.dwt_setrxtimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_setrxtimeout &rArr; DW1000_writeData16 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData16
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecvNoPre
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceRecv
</UL>

<P><STRONG><a name="[8e]"></a>dwt_starttx</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, deca_device.o(i.dwt_starttx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_starttx &rArr; dwt_entersleepaftertx &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_entersleepaftertx
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData16
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendExpResp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendDelayed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSend
</UL>

<P><STRONG><a name="[e4]"></a>dwt_syncrxbufptrs</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, deca_device.o(i.dwt_syncrxbufptrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dwt_syncrxbufptrs &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
</UL>

<P><STRONG><a name="[8c]"></a>dwt_writetxdata</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, deca_device.o(i.dwt_writetxdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dwt_writetxdata &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendExpResp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendDelayed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSend
</UL>

<P><STRONG><a name="[8d]"></a>dwt_writetxfctrl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, deca_device.o(i.dwt_writetxfctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dwt_writetxfctrl &rArr; DW1000_writeData32 &rArr; DW1000_writeData
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_writeData32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendExpResp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSendDelayed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceSend
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[e7]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_free
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete_node
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[dc]"></a>inet_aton</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, conversion.o(i.inet_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inet_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdPing
</UL>

<P><STRONG><a name="[cf]"></a>inet_ntoa</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, conversion.o(i.inet_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_ntoa &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdLs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTPing
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTDeviceSignin
</UL>

<P><STRONG><a name="[e6]"></a>list_delete_node</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stdplus_linklist.o(i.list_delete_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_delete_node &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTReSignin
</UL>

<P><STRONG><a name="[e8]"></a>list_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stdplus_linklist.o(i.list_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterCycle
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTReSignin
</UL>

<P><STRONG><a name="[e9]"></a>list_new</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stdplus_linklist.o(i.list_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = list_new &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterCycle
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTReSignin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVManagerInit
</UL>

<P><STRONG><a name="[d1]"></a>listnode_add</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stdplus_linklist.o(i.listnode_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = listnode_add &rArr; listnode_new &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_new
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTReSignin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTWaitDeviceRegister
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTDeviceSignin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVManagerInit
</UL>

<P><STRONG><a name="[cc]"></a>listnode_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stdplus_linklist.o(i.listnode_head))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSetConfigureRespons
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTGetConfigureRespons
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTAllocRespons
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = main &rArr; uSVIdle &rArr; uPTRegisterCycle &rArr; _uPTDeviceSignin &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVManagerInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLUserInterfaceRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangingInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTDeviceSignin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVManagerInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[f0]"></a>uLLDelayMs</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ulldriver.o(i.uLLDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = uLLDelayMs &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
</UL>

<P><STRONG><a name="[cb]"></a>uLLFrameRecv</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ulldriver.o(i.uLLFrameRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uLLFrameParse
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitInAddrEx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitEx
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTWaitDeviceRegister
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTAllocRespons
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitData
</UL>

<P><STRONG><a name="[f2]"></a>uLLFrameSend</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ulldriver.o(i.uLLFrameSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = uLLFrameSend &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uLLFramePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSetConfigure
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTPing
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTGetConfigure
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
</UL>

<P><STRONG><a name="[d5]"></a>uLLFrameSendDelayed</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ulldriver.o(i.uLLFrameSendDelayed))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = uLLFrameSendDelayed &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uLLFramePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTRangingSendResp
</UL>

<P><STRONG><a name="[cd]"></a>uLLFrameSendEx</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ullpacket.o(i.uLLFrameSendEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = uLLFrameSendEx &rArr; uLLFrameSend &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSend
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSetConfigureRespons
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTPingRespons
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTGetConfigureRespons
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSigninRespons
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterCycle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTWaitDeviceRegister
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTDeviceSignin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTAllocRespons
</UL>

<P><STRONG><a name="[d3]"></a>uLLFrameSendExpResp</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ulldriver.o(i.uLLFrameSendExpResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = uLLFrameSendExpResp &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uLLFramePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTRangingSendPoll
</UL>

<P><STRONG><a name="[d7]"></a>uLLFrameWaitData</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ullpacket.o(i.uLLFrameWaitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = uLLFrameWaitData &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTGetConfigure
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTRangingWaitRespons
</UL>

<P><STRONG><a name="[d0]"></a>uLLFrameWaitEx</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, ullpacket.o(i.uLLFrameWaitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSetConfigure
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTPing
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTWaitDeviceRegister
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTDeviceSignin
</UL>

<P><STRONG><a name="[f3]"></a>uLLFrameWaitInAddrEx</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, ullpacket.o(i.uLLFrameWaitInAddrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = uLLFrameWaitInAddrEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameRecv
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[f4]"></a>uLLGetRxTimeStamp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ulldriver.o(i.uLLGetRxTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = uLLGetRxTimeStamp &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
</UL>

<P><STRONG><a name="[f5]"></a>uLLGetTxTimeStamp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ulldriver.o(i.uLLGetTxTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = uLLGetTxTimeStamp &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
</UL>

<P><STRONG><a name="[ed]"></a>uLLInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ulldriver.o(i.uLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uLLInit &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>uLLUserInterfaceRegister</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ulldriver.o(i.uLLUserInterfaceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = uLLUserInterfaceRegister &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>uPTGetConfigure</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ustatemaintenance.o(i.uPTGetConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = uPTGetConfigure &rArr; uLLFrameWaitData &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSend
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[f7]"></a>uPTGetConfigureRespons</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ustatemaintenance.o(i.uPTGetConfigureRespons))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = uPTGetConfigureRespons &rArr; uLLFrameSendEx &rArr; uLLFrameSend &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_head
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[f8]"></a>uPTPing</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ustatemaintenance.o(i.uPTPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = uPTPing &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitEx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[f9]"></a>uPTPingRespons</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ustatemaintenance.o(i.uPTPingRespons))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = uPTPingRespons &rArr; uLLFrameSendEx &rArr; uLLFrameSend &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[fa]"></a>uPTRangingCyle</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, uptranging.o(i.uPTRangingCyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = uPTRangingCyle &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitEx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_SendData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTRangingWaitRespons
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTRangingSendResp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevSn
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLGetRxTimeStamp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLDelayMs
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitData
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[fd]"></a>uPTRangingRespons</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, uptranging.o(i.uPTRangingRespons))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = uPTRangingRespons &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitEx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTRangingWaitRespons
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTRangingSendResp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTRangingSendPoll
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLGetTxTimeStamp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLGetRxTimeStamp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLDelayMs
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[fe]"></a>uPTReSignin</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, uregister.o(i.uPTReSignin))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = uPTReSignin &rArr; _uPTDeviceSignin &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_add
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_new
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_free
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete_node
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTDeviceSignin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[ff]"></a>uPTRegisterCycle</STRONG> (Thumb, 86 bytes, Stack size 816 bytes, uregister.o(i.uPTRegisterCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = uPTRegisterCycle &rArr; _uPTDeviceSignin &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_new
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_free
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTWaitDeviceRegister
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTDeviceSignin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[100]"></a>uPTRegisterRespons</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, uregister.o(i.uPTRegisterRespons))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = uPTRegisterRespons &rArr; _uPTAllocRespons &rArr; uLLFrameSendEx &rArr; uLLFrameSend &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitEx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameRecv
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uPTAllocRespons
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[104]"></a>uPTSetConfigure</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ustatemaintenance.o(i.uPTSetConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = uPTSetConfigure &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitEx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[105]"></a>uPTSetConfigureRespons</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ustatemaintenance.o(i.uPTSetConfigureRespons))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = uPTSetConfigureRespons &rArr; uLLFrameSendEx &rArr; uLLFrameSend &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_head
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[106]"></a>uPTSigninRespons</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uregister.o(i.uPTSigninRespons))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = uPTSigninRespons &rArr; uLLFrameSendEx &rArr; uLLFrameSend &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>

<P><STRONG><a name="[ef]"></a>uSVIdle</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, uidle.o(i.uSVIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = uSVIdle &rArr; uPTRegisterCycle &rArr; _uPTDeviceSignin &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSetConfigureRespons
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSetConfigure
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingRespons
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRangingCyle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTPingRespons
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTPing
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTGetConfigureRespons
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTGetConfigure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitInAddrEx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_head
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTSigninRespons
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterCycle
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTReSignin
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>uSVManagerInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usvmanager.o(i.uSVManagerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uSVManagerInit &rArr; listnode_add &rArr; listnode_new &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_add
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_new
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>uSVShellInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usvshell.o(i.uSVShellInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uSVShellInit &rArr; QueueCreate &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueCreate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>uSVShellPrase</STRONG> (Thumb, 316 bytes, Stack size 152 bytes, usvshell.o(i.uSVShellPrase))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = uSVShellPrase &rArr; _uSVShellLogInsert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellLogInsert
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdSet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdScan
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdPing
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uSVShellCmdLs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVIdle
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ca]"></a>_uPTAllocRespons</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, uregister.o(i._uPTAllocRespons))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _uPTAllocRespons &rArr; uLLFrameSendEx &rArr; uLLFrameSend &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameRecv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_head
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterRespons
</UL>

<P><STRONG><a name="[ce]"></a>_uPTDeviceSignin</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, uregister.o(i._uPTDeviceSignin))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _uPTDeviceSignin &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitEx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_add
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterCycle
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTReSignin
</UL>

<P><STRONG><a name="[d8]"></a>_uPTWaitDeviceRegister</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, uregister.o(i._uPTWaitDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _uPTWaitDeviceRegister &rArr; uLLFrameWaitEx &rArr; uLLFrameRecv &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameWaitEx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendEx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameRecv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_add
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uPTRegisterCycle
</UL>

<P><STRONG><a name="[d9]"></a>_uSVShellCmdLs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, usvshell.o(i._uSVShellCmdLs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _uSVShellCmdLs &rArr; inet_ntoa &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
</UL>

<P><STRONG><a name="[db]"></a>_uSVShellCmdPing</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usvshell.o(i._uSVShellCmdPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _uSVShellCmdPing &rArr; inet_aton &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
</UL>

<P><STRONG><a name="[dd]"></a>_uSVShellCmdScan</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usvshell.o(i._uSVShellCmdScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _uSVShellCmdScan &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
</UL>

<P><STRONG><a name="[df]"></a>_uSVShellCmdSet</STRONG> (Thumb, 170 bytes, Stack size 80 bytes, usvshell.o(i._uSVShellCmdSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _uSVShellCmdSet &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
</UL>

<P><STRONG><a name="[e0]"></a>_uSVShellLogInsert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usvshell.o(i._uSVShellLogInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _uSVShellLogInsert &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uSVShellPrase
</UL>

<P><STRONG><a name="[ea]"></a>listnode_new</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stdplus_linklist.o(i.listnode_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = listnode_new &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listnode_add
</UL>

<P><STRONG><a name="[c9]"></a>_uLLFramePacket</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ulldriver.o(i._uLLFramePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _uLLFramePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendExpResp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSendDelayed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameSend
</UL>

<P><STRONG><a name="[f1]"></a>_uLLFrameParse</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ulldriver.o(i._uLLFrameParse))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uLLFrameRecv
</UL>

<P><STRONG><a name="[b9]"></a>SetSysClock</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a5]"></a>_DoInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[a8]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[aa]"></a>_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[a9]"></a>_WriteNoCheck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[ad]"></a>_PrintInt</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[ae]"></a>_PrintUnsigned</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[ac]"></a>_StoreChar</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[c4]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[c8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[48]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
